name: Self-Contained Code Analysis & Security

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]


jobs:
  code_analysis:
    # runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 (Linter)
        id: flake8
        run: |
          pip install flake8
          flake8 . > flake8_results.txt
        continue-on-error: true

      - name: Annotate Flake8 Results
        if: steps.flake8.outcome != 'success'
        run: |
          cat flake8_results.txt | while IFS= read -r line; do
            IFS=: read -r file line_num col msg <<< "$line"
            if [[ ! -z "$file" && ! -z "$line_num" && ! -z "$col" && ! -z "$msg" ]]; then
              echo "::warning file=$file,line=$line_num,col=$col::$msg"
            fi
          done

      - name: Run Bandit (Security Checker)
        id: bandit
        run: |
          pip install bandit
          bandit -r . -f json > bandit_results.json
        continue-on-error: true

      - name: Annotate Bandit Results
        if: steps.bandit.outcome != 'success'
        run: |
          jq -r '.results[] | "::error file=\(.filename),line=\(.line_number)::\(.issue_text)"' bandit_results.json
          
      - name: Run Safety (Dependency Checker)
        id: safety
        run: |
          pip install safety
          safety check --full-report --json > safety_results.json
        continue-on-error: true
      - name: Annotate Safety Results
        if: steps.safety.outcome != 'success'
        run: |
           jq -r '.vulnerabilities[] | "::error file=\(.package),line=0::Vulnerability found in package \(.package) at version \(.version) with id \(.vulnerability_id) " ' safety_results.json

      - name: Run MyPy (Type Checker)
        id: mypy
        run: |
          pip install mypy
          mypy . --ignore-missing-imports > mypy_results.txt
        continue-on-error: true

      - name: Annotate MyPy Results
        if: steps.mypy.outcome != 'success'
        run: |
          cat mypy_results.txt | while IFS= read -r line; do
             if [[ "$line" == *": error:"* ]] ; then
                IFS=: read -r file line_num col msg <<< "$line"
                if [[ ! -z "$file" && ! -z "$line_num" && ! -z "$col" && ! -z "$msg" ]]; then
                   echo "::error file=$file,line=$line_num,col=$col::$msg"
                fi
             fi
          done

      - name: Run Radon (Code Complexity)
        id: radon
        run: |
          pip install radon
          radon cc -a . > radon_results.txt
        continue-on-error: true

      - name: Report Radon Results
        if: steps.radon.outcome != 'success'
        run: |
          cat radon_results.txt | while IFS= read -r line; do
             if [[ "$line" == *"complexity"* ]] ; then
                echo "::warning::$line"
             fi
          done

      - name: Report
        if: steps.flake8.outcome != 'success' || steps.bandit.outcome != 'success' || steps.safety.outcome != 'success' || steps.mypy.outcome != 'success' || steps.radon.outcome != 'success'
        run: |
          echo "## Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "Flake8 Success: ${{ steps.flake8.outcome == 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "Bandit Success: ${{ steps.bandit.outcome == 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "Safety Success: ${{ steps.safety.outcome == 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "MyPy Success: ${{ steps.mypy.outcome == 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "Radon Success: ${{ steps.radon.outcome == 'success' }}" >> $GITHUB_STEP_SUMMARY
          if [ -s "flake8_results.txt" ]; then
            echo "### Flake8 (Code Style)" >> $GITHUB_STEP_SUMMARY
            cat flake8_results.txt >> $GITHUB_STEP_SUMMARY
          fi
          if [ -s "bandit_results.json" ]; then
            echo "### Bandit (Security)" >> $GITHUB_STEP_SUMMARY
              jq -r '.results[] | "\(.filename):\(.line_number) \(.issue_text)"' bandit_results.json  >> $GITHUB_STEP_SUMMARY
          fi
          if [ -s "safety_results.json" ]; then
             echo "### Safety (Dependencies)" >> $GITHUB_STEP_SUMMARY
             jq -r '.vulnerabilities[] | "\(.package) at version \(.version) has vulnerability: \(.vulnerability_id)" ' safety_results.json  >> $GITHUB_STEP_SUMMARY
          fi
          if [ -s "mypy_results.txt" ]; then
            echo "### MyPy (Type checking)" >> $GITHUB_STEP_SUMMARY
            cat mypy_results.txt >> $GITHUB_STEP_SUMMARY
          fi
          if [ -s "radon_results.txt" ]; then
             echo "### Radon (Complexity)" >> $GITHUB_STEP_SUMMARY
             cat radon_results.txt  >> $GITHUB_STEP_SUMMARY
          fi